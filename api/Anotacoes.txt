
-- Instalando Bibliotecas com npm
    -npm install --save-dev nodemon
    -npm install mysql2
    -npm install sequelize  
    -npm install sequelize-cli (recursos de linha de comando)- Comand Line Interface CLI
    -npm install path
-- Criando base do Projeto
    -npx sequelize-cli init (cria base para o projeto com banco de dados sequelize)
    - referencias: https://sequelize.org/docs/v6/other-topics/migrations/
        -criar arquivo .sequelizerc e colocar na pasta raiz para resolver o caminho das pastas usadas pelo sequelize quando o arquivo dentro da pasta
        config>config.json não estiver no diretório principal do projeto. Para isso, usamos a library 'path'
        - No arquivo config.json, devemos incluir o nome do bando de dados e também a senha para acesso ao BD.

    -curso alura: https://www.alura.com.br/curso-online-modelagem-banco-dados-entidades-relacionamentos-atributos
    -Criar Model pelo terminal do projeto:
        - npx sequelize-cli model:create --name Pessoas --attributes nome:string,ativo:boolean,email:string,role:string
    -Migração em SQL - permite retornar a estados anteriores do código (parecido com versionamento do git)
-- Plural x Singular
    - Quando usamos ORMs (como o Sequelize) ou outros frameworks (como o Rails se estiver trabalhando com a linguagem
     Ruby) para trabalhar com os bancos de dados, o comportamento padrão dessas ferramentas é “pluralizar” automaticamente
      todos os nomes de tabelas. Ou seja, quando criamos a tabela Person (Pessoa em inglês) através do Sequelize, ele vai
       se conectar ao banco e criar a tabela com o nome de People (Pessoas em inglês). Isso vale para qualquer nome: Name
    (Nome) se torna Names (Nomes) e por aí vai.
    - Quando se trabalha com nomes em inglês isso não costuma ser um problema em si, pois a pessoa não precisa se preocupar em avisar ao Sequelize “olha, a tabela que eu chamei de Person você procura no banco como People, ok?”; o próprio ORM já faz essa conversão e sabe exatamente como transformar palavras em inglês do singular para o plural e vice-versa
    
    -sequelize.define('User', {
          // ... (attributes)
    }, {
          freezeTableName: true
    });

    -sequelize.define('User', {
        // ... (attributes)
    }, {
        tableName: 'Employees'
    });

--RODANDO MIGRAÇÕES 
    -No terminal: npx sequelize-cli db:migrate - realiza alteracoes rastreaveis no banco de dados
    - Para desfazer um comando no sequelize:
        - npx sequelize-cli db:migrate:undo (dezfaz a ultima migracao feita no BD)
        - Desfazer tudo : npx sequelize db:migrate:undo:all
--Arquivos Seed
    - npx sequelize-cli seed:generate --name demo-pessoa;
    - npx sequelize-cli db:seed:all


3) CONTROLADORES E ROTAS  
    -Padräo de arquitetura MVC (Model View Controller);

4) CRUD com sequelize

5) RELAÇÕES
    -Sempre criar primeiro as tabelas que nao possuem chave estrangeira FK;
    - Criando mais tabelas:
        - npx sequelize-cli model:create --name Turmas --attributes data_inicio:dateonly
        - npx sequelize-cli model:create --name Matriculas --attributes status:string
    
    -POPULANDO TABELAS : npx sequelize-cli seed:generate --name demo-nivel
                         npx sequelize-cli db:seed:all


CURSO 2 - ORM com NodeJS: avançando nas funcionalidades do sequelize 

1.0) SOFT DELETE - EXCLUSÁO SUAVE
    1.5)Soft Delete (Exclusão Suave) (https://sequelize.org/docs/v6/core-concepts/paranoid/)
        - {paranoid: true} - incluir esse atributo no model da tabela onde desejamos criar o soft Delete
        - Sequelize supports the concept of paranoid tables. A paranoid table is one that, when told to delete a record, it will not truly delete it. Instead, a special column called deletedAt will have its value set to the timestamp of that deletion request.
            This means that paranoid tables perform a soft-deletion of records, instead of a hard-deletion.
    1.6) Adicionar a coluna deletedAt a tabela Pessoas (ja existente):
        - Via SQL: "ALTER TABLE Pessoas ADD COLUMN deletedAt datetime AFTER updatedAt;"
        - Via Migrations: criar arquivo de migration adicionando a coluna, allowNull deve ser true;
        - SQl vai mostrar tudo que tiver "NULL"na coluna deletedAt;
    1.8) Restaurando Registros

2.0) ESCOPO DE MODELO E VALIDACÕES
    2.2) Escopos de Modelo 
        - documentacao: https://sequelize.org/docs/v6/other-topics/scopes/
        - Escopos são determinados nos Models (defaultScope);
        - No caso do Sequelize, podemos determinar o escopo padrão (defaultScope)
          que justamente define quais restrições e definições serão utilizadas na
          query… por padrão. E além do escopo padrão podemos definir outros, enquanto
          fizer sentido para a aplicação, e dar a cada escopo um nome que será usado
          pelo JavaScript para identificá-lo.
    
    2.4) Outros Escopos
        - Através da propriedade scopes: {} , podemos inserir quantos escopos forem
          necessários dentro do nosso projeto.
        - const todasAsPessoas = await database.Pessoas.scope('todos').findAll(); // scope criado no model pessoas

    2.5) Validando dados
        - Validando dados com SQL : CHECK
            * CHECK (status in ('confirmado','cancelado'))   
        - Validando dados com sequelize 
            * documentacao: https://sequelize.org/docs/v6/core-concepts/validations-and-constraints/
            * isEmail: true - incluir essas validações direto nos atributos do model
        - Exemplo de validacao de e-mail no model pessoas;
    
    2.7) Validação Customizada
        -  validate: {
                funcaoValidadora: function(dado) {
                  if(dado.length < 3) throw new Error('Campo nome deve ter mais de 3 caracteres')
                }
              };
        - Ver Model Pessoa para Exemplo
        - é possivel criar uma funcao com JS dentro do model para validar um determinado dados
        -Vale lembrar : constrains 
            * São constraints em SQL:
                NOT NULL - garante que não exista nenhum valor NULL na coluna;
                UNIQUE - Garante que não existam valores iguais em uma coluna;
                PRIMARY KEY - Identifica cada linha em uma tabela através de um valor único (junção de NOT NULL e UNIQUE);
                FOREIGN KEY - Identifica um valor único em outra tabela como chave;
                CHECK - Garante que todos os valores em uma coluna satisfazem uma condição específica;
                DEFAULT - Determina um valor padrão caso nenhum valor seja informado;
                INDEX - Para criar índices e facilitar o acesso a determinados conjuntos de dados.

3.0) ESCOPO DE ASSOCIAÇÃO E OPERADORES
    3.2) Escopos de Associação
        - Documentação: https://sequelize.org/docs/v6/advanced-association-concepts/association-scopes/ 
        - São definidos dentro do modelo na parte de associações;
        - A partir desses escopos, o sequelize gera, automaticamente, alguns métodos que facilitam a execução de operações no BD.
        - Esses métodos, criados pelo sequelize, recebem o nome de Mixins;
        - Ver exemplo no models pessoas desse projeto;
    3.3) Mixins
        - São criados a partir das associações;
        -um mixin fornece métodos que implementam um certo comportamento em objetos,
         sem poder ser utilizado sozinho, mas sim para adicionar esse comportamento a outras classes.
         No Sequelize, temos uma diferença entre escopos de modelo, que são aplicados em chamadas estáticas
         ao modelo (como no exemplo que fizemos no vídeo, Pessoas.scope('todos').findAll()), e escopos de associação,
         que são uma regra, ou um conjunto de atributos que são automaticamente aplicados em instâncias do modelo, como
         em Pessoas.associate = function(models) {...}.
         Escopos de associação se comportam da mesma forma que os escopos de modelo, no sentido que ambos aplicam palavras-chave
         como WHERE em chamadas ao banco; mas os mixins são métodos que existem somente nas instâncias dos modelos: Pessoas.getPessoasMatriculadas,
         Niveis.getNiveisPorTurma, etc.
         A lista de métodos criados automaticamente com as instâncias de modelo são:
         * addModel()
         * addModels()
         * countModels()
         * createModel()
         * getModels()
         * hasModel()
         * hasModels()
         * removeModel()
         * removeModels()
         * setModels()
        Lembrando que “Model” e “Models”, aqui, refere-se ao nome do modelo! Lembre-se também que o Sequelize cria os nomes automaticamente mas
        não entende muito bem o singular e plural em português, mas você pode definir nomes personalizados para seus mixins,
    
    3.5) Usando Operadores 
        - http://localhost:3000/turmas?data_inicial=2020-01-01&data_final=2020-03-01
        - Tabela de operadores =, < , > , <= etc

    3.7) Funções Agregadoras
        -https://sequelize.org/docs/v6/core-concepts/model-querying-finders/
        -Model Queryng - Finders;
        - By default, the results of all finder methods are instances of the model class (as opposed to being just plain JavaScript objects).
            This means that after the database returns the results, Sequelize automatically wraps everything in proper instance objects. 
            In a few cases, when there are too many results, this wrapping can be inefficient. 
            To disable this wrapping and receive a plain response instead, pass { raw: true } as an option to the finder method.
        - findAndCountAll

    3.8) Outros Agregadores
        - https://sequelize.org/docs/v6/core-concepts/model-querying-basics/

4.0) TRANSAÇÕES (Transactions Sequelize)
    4.3)Usando Transações
        -As transações servem para garantir a integridade dos dados em operações como esta que fizemos. 
        Por exemplo, uma operação que acesse mais de uma tabela, acesse várias tabelas, ou que faça 
        atualizações em várias linhas de uma tabela.
        Se acontece qualquer erro nesse processo, qualquer erro de banco, e temos 
        uma falha em qualquer parte dessa operação, nenhum dado é salvo, nenhum dado é atualizado no banco,
        na realidade, e o banco volta para o ponto onde ele estava antes de tudo isso começar, antes de todas
        as operações que passamos começarem.
        - EXEMPLO no método cancelaPessoa dentro de PessoaController
    
5.0) REFATORANDO PROJETO COM SERVIÇOS
    - Nova camada chamada "Serviços" entre o controlador e os modelos